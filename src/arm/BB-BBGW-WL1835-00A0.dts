/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;
/plugin/;

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/pinctrl/am33xx.h>
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	compatible = "ti,am335x-bone-green-wireless";

	/* identification */
	part-number = "BB-BBGW-WL1835";
	version = "00A0";

	/* state the resources this cape uses */
	exclusive-use =
		/* the pin header uses */
		"P9.20",	/* gpmc_ad12.gpio1_28 BT_EN */
		"P9.19",	/* gpmc_csn0.gpio1_29 LS_BUF_EN */
		"P8.12",	/* gpmc_ad12.mmc2_dat0 */
		"P8.11",	/* gpmc_ad13.mmc2_dat1 */
		"P8.16",	/* gpmc_ad14.mmc2_dat2 */
		"P8.15",	/* gpmc_ad15.mmc2_dat3 */
		"P8.18",	/* gpmc_clk.mmc2_clk */
		"P8.14",	/* gpmc_ad10.gpio0_26 WL_EN */
		"P8.17",	/* gpmc_ad11.gpio0_27 WL_IRQ */
		/* the hardware IP uses */
		"mmc3",
		"uart3";

	fragment@0 {
		target-path="/";
		__overlay__ {
			model = "TI AM335x BeagleBone Green Wireless";
			compatible = "ti,am335x-bone-green-wireless", "ti,am335x-bone-green", "ti,am335x-bone-black", "ti,am335x-bone", "ti,am33xx";

			wlan_en_reg: fixedregulator@2 {
				compatible = "regulator-fixed";
				regulator-name = "wlan-en-regulator";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				startup-delay-us= <70000>;

				/* WL_EN */
				gpio = <&gpio0 26 0>;
				enable-active-high;
			};

			leds {
				pinctrl-names = "default";
				pinctrl-0 = <&wl18xx_pins>;
				compatible = "gpio-leds";

				wl18xx_bt_en {
					label = "wl18xx_bt_en";
					gpios = <&gpio1 28 GPIO_ACTIVE_HIGH>;
					default-state = "off";
				};
			};
		};
	};

	fragment@1 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			wl18xx_pins: pinmux_wl18xx_pins {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x878, PIN_OUTPUT_PULLUP | MUX_MODE7)	/* gpmc_ad12.gpio1_28 BT_EN */
				>;
			};

			wlbtbuf_pin: pinmux_wlbtbuf_pin {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x87C, PIN_OUTPUT_PULLUP | MUX_MODE7)	/* gpmc_csn0.gpio1_29 LS_BUF_EN */
				>;
			};

			mmc3_pins: pinmux_mmc3_pins {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x830, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad12.mmc2_dat0 */
					AM33XX_IOPAD(0x834, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad13.mmc2_dat1 */
					AM33XX_IOPAD(0x838, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad14.mmc2_dat2 */
					AM33XX_IOPAD(0x83c, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad15.mmc2_dat3 */
					AM33XX_IOPAD(0x888, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_csn3.mmc2_cmd */
					AM33XX_IOPAD(0x88c, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_clk.mmc2_clk */
				>;
			};

			mmc3_pins_sleep: pinmux_mmc3_pins_sleep {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x830, PIN_INPUT_PULLDOWN | MUX_MODE3)	/* gpmc_ad12.mmc2_dat0 */
					AM33XX_IOPAD(0x834, PIN_INPUT_PULLDOWN | MUX_MODE3)	/* gpmc_ad13.mmc2_dat1 */
					AM33XX_IOPAD(0x838, PIN_INPUT_PULLDOWN | MUX_MODE3)	/* gpmc_ad14.mmc2_dat2 */
					AM33XX_IOPAD(0x83c, PIN_INPUT_PULLDOWN | MUX_MODE3)	/* gpmc_ad15.mmc2_dat3 */
					AM33XX_IOPAD(0x888, PIN_INPUT_PULLDOWN | MUX_MODE3)	/* gpmc_csn3.mmc2_cmd */
					AM33XX_IOPAD(0x88c, PIN_INPUT_PULLDOWN | MUX_MODE3)	/* gpmc_clk.mmc2_clk */
				>;
			};

			/* wl18xx card enable/irq GPIOs. */
			wlan_pins: pinmux_wlan_pins {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x828, PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad10.gpio0_26 WL_EN */
					AM33XX_IOPAD(0x82C, PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad11.gpio0_27 WL_IRQ */
				>;
			};

			/* wl18xx card enable/irq GPIOs. */
			wlan_pins_sleep: pinmux_wlan_pins_sleep {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x828, PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad10.gpio0_26 WL_EN */
					AM33XX_IOPAD(0x82C, PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad11.gpio0_27 WL_IRQ */
				>;
			};

			uart3_pins_default: pinmux_uart3_pins_default {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x934, PIN_INPUT_PULLUP | MUX_MODE1)	/* gmii1_rxd3.uart3_rxd */
					AM33XX_IOPAD(0x938, PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gmii1_rxd2.uart3_txd */
					AM33XX_IOPAD(0x948, PIN_INPUT | MUX_MODE3)		/* mdio_data.uart3_ctsn */
					AM33XX_IOPAD(0x94c, PIN_OUTPUT_PULLDOWN | MUX_MODE3)	/* mdio_clk.uart3_rtsn */
				>;
			};

			uart3_pins_sleep: pinmux_uart3_pins_sleep {
				pinctrl-single,pins = <
					AM33XX_IOPAD(0x934, PIN_INPUT_PULLDOWN | MUX_MODE7)	/* (L17) gmii1_rxd3.uart3_rxd */
					AM33XX_IOPAD(0x938, PIN_INPUT_PULLDOWN | MUX_MODE7)	/* (L16) gmii1_rxd2.uart3_txd */
					AM33XX_IOPAD(0x948, PIN_INPUT_PULLDOWN | MUX_MODE7)	/* (M17) mdio_data.uart3_ctsn */
					AM33XX_IOPAD(0x94c, PIN_INPUT_PULLDOWN | MUX_MODE7)	/* (M18) mdio_clk.uart3_rtsn */
				>;
			};
		};
	};

	fragment@2 {
		target = <&mac>;
		__overlay__ {
			status = "disabled";
		};
	};

	fragment@3 {
		target = <&mmc3>;
		__overlay__ {
			dmas = <&edma_xbar 12 0 1
				&edma_xbar 13 0 2>;
			dma-names = "tx", "rx";
			status = "okay";
			vmmc-supply = <&wlan_en_reg>;
			bus-width = <4>;
			non-removable;
			cap-power-off-card;
			ti,needs-special-hs-handling;
			keep-power-in-suspend;
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&mmc3_pins &wlan_pins &wlbtbuf_pin>;
			pinctrl-1 = <&mmc3_pins_sleep &wlan_pins_sleep &wlbtbuf_pin>;

			#address-cells = <1>;
			#size-cells = <0>;
			wlcore: wlcore@2 {
				compatible = "ti,wl1835";
				reg = <2>;
				interrupt-parent = <&gpio0>;
				interrupts = <27 IRQ_TYPE_EDGE_RISING>;
			};
		};
	};

	fragment@4 {
		target = <&uart3>;
		__overlay__ {
			pinctrl-names = "default", "sleep";
			pinctrl-0 = <&uart3_pins_default>;
			pinctrl-1 = <&uart3_pins_sleep>;
			status = "okay";
		};
	};

	fragment@5 {
		target = <&gpio1>;
		__overlay__ {
			ls_buf_en {
				gpio-hog;
				gpios = <29 GPIO_ACTIVE_HIGH>;
				output-high;
				line-name = "LS_BUF_EN";
			};
		};
	};

/* BT_AUD_OUT from wl1835 has to be pulled low when WL_EN is activated.*/
/* in case it isn't, wilink8 ends up in one of the test modes that     */
/* intruces various issues (elp wkaeup timeouts etc.)                  */
/* On the BBGW this pin is routed through the level shifter (U21) that */
/* introduces a pullup on the line and wilink8 ends up in a bad state. */
/* use a gpio hog to force this pin low. An alternative may be adding  */
/* an external pulldown on U21 pin 4.                                  */

	fragment@6 {
		target = <&gpio3>;
		__overlay__ {
			bt_aud_in {
				gpio-hog;
				gpios = <16 GPIO_ACTIVE_HIGH>;
				output-low;
				line-name = "MCASP0_AHCLKR";
			};
		};
	};
};
